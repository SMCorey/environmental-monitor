// Environmental Sensor Project


#include <Arduino.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include "../lib/LilyGo_AMOLED/LilyGo_AMOLED.h"
#include "../lib/LilyGo_AMOLED/LV_Helper.h"
#include "ui/ui.h"
#include "Adafruit_BME680.h"

#define BME_SCK 15
#define BME_MISO 14
#define BME_MOSI 13
#define BME_CS 12

#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME680 bme(BME_CS, BME_MOSI, BME_MISO,  BME_SCK);

// Existing objects and variables
LilyGo_Class amoled;

// WiFi credentials
const char *ssid = "SR";
const char *password = "Bug0ut!!";

// MQTT Broker settings
const char *mqtt_broker = "broker.emqx.io"; // Replace with your broker address
const int mqtt_port = 1883;
const char *mqtt_topic = "tauri/sensor"; // Replace with your desired topic

// MQTT client
WiFiClient espClient;
PubSubClient client(espClient);

// Function declarations
void updateConnectionStatus();
void callback(char *topic, byte *payload, unsigned int length);
void setupMQTT();
void updateSensorLabels(float temperature, float pressure, float humidity, float gas, float altitude);

void updateConnectionStatus()
{
    // Update WiFi status label
    if (WiFi.status() == WL_CONNECTED)
    {
        _ui_label_set_property(ui_LBLip, _UI_LABEL_PROPERTY_TEXT, "Connected");
        lv_obj_set_style_text_color(ui_LBLip, lv_color_hex(0x00FF00), LV_PART_MAIN | LV_STATE_DEFAULT);
    }
    else
    {
        _ui_label_set_property(ui_LBLip, _UI_LABEL_PROPERTY_TEXT, "Disconnected");
        lv_obj_set_style_text_color(ui_LBLip, lv_color_hex(0xFF0000), LV_PART_MAIN | LV_STATE_DEFAULT);
    }

    // Update MQTT broker status label
    if (client.connected())
    {
        char broker_status[50];
        snprintf(broker_status, sizeof(broker_status), "%s", mqtt_broker);
        _ui_label_set_property(ui_LVLbrokerip, _UI_LABEL_PROPERTY_TEXT, broker_status);
        lv_obj_set_style_text_color(ui_LVLbrokerip, lv_color_hex(0x00FF00), LV_PART_MAIN | LV_STATE_DEFAULT);
    }
    else
    {
        _ui_label_set_property(ui_LVLbrokerip, _UI_LABEL_PROPERTY_TEXT, "Disconnected");
        lv_obj_set_style_text_color(ui_LVLbrokerip, lv_color_hex(0xFF0000), LV_PART_MAIN | LV_STATE_DEFAULT);
    }
}

void callback(char *topic, byte *payload, unsigned int length)
{
    // We don't need to do anything with incoming messages anymore
    // since we're just displaying sensor values in labels
}

void setupMQTT()
{
    client.setServer(mqtt_broker, mqtt_port);
    client.setCallback(callback);

    // Generate a random client ID
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);

    // Try to connect to MQTT broker
    while (!client.connected())
    {
        Serial.println("Connecting to MQTT...");

        if (client.connect(clientId.c_str()))
        {
            Serial.println("Connected to MQTT broker");
            client.subscribe(mqtt_topic);
        }
        else
        {
            Serial.print("Failed with state ");
            Serial.println(client.state());
            delay(2000);
        }
    }
}

void setup()
{
    Serial.begin(115200);
    
    // Initialize random number generator
    randomSeed(micros());

    // Initialize the AMOLED, LVGL, and SLS
    Serial.println("Graphics Initialize Starting...");
    // Auto Detect the LilyGo S3 AMOLED from three possible boards
    //     - 1.47 inch, 1.91 inch, 2.41 inch
    // and load the appropriate drivers for LVGL
    while (!amoled.begin())
    {
        Serial.println("The board model cannot be detected, please raise the Core Debug Level to an error");
        delay(1000);
    }
    // Register lvgl helper
    beginLvglHelper(amoled);
    // Start SLS lvgl in ui.c - this file is generated by SLS
    ui_init();
    Serial.println("Graphics Initialize Done!");

    // WiFi Connection
    Serial.println();
    Serial.println("******************************************************");
    Serial.print("Connecting to ");
    Serial.println(ssid);

    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED)
    {
        delay(500);
        Serial.print(".");
        updateConnectionStatus();
    }

    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());

    // Setup MQTT connection
    setupMQTT();

    // Update UI status
    updateConnectionStatus();

    if (!bme.begin())
    {
        Serial.println("Could not find a valid BME680 sensor, check wiring!");
        while (1)
            ;
    }

    // Set up oversampling and filter initialization
    bme.setTemperatureOversampling(BME680_OS_8X);
    bme.setHumidityOversampling(BME680_OS_2X);
    bme.setPressureOversampling(BME680_OS_4X);
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
    bme.setGasHeater(320, 150); // 320*C for 150 ms
}

// Helper function to update sensor value labels
void updateSensorLabels(float temperature, float pressure, float humidity, float gas, float altitude) {
    char buf[32];
    
    snprintf(buf, sizeof(buf), "%.1f °C", temperature);
    _ui_label_set_property(ui_LBLtempVAL, _UI_LABEL_PROPERTY_TEXT, buf);
    
    snprintf(buf, sizeof(buf), "%.1f hPa", pressure);
    _ui_label_set_property(ui_LBLpressVAL, _UI_LABEL_PROPERTY_TEXT, buf);
    
    snprintf(buf, sizeof(buf), "%.1f %%", humidity);
    _ui_label_set_property(ui_LBLhumVAL, _UI_LABEL_PROPERTY_TEXT, buf);
    
    snprintf(buf, sizeof(buf), "%.1f KΩ", gas);
    _ui_label_set_property(ui_LBLgasVAL, _UI_LABEL_PROPERTY_TEXT, buf);
    
    snprintf(buf, sizeof(buf), "%.1f m", altitude);
    _ui_label_set_property(ui_LBLaltVAL, _UI_LABEL_PROPERTY_TEXT, buf);
}

void loop()
{
    // lvgl task handler must be called in the loop
    lv_task_handler();

    // Handle MQTT connection
    if (!client.connected())
    {
        setupMQTT();
    }
    client.loop();

    // Update UI status periodically
    static unsigned long lastStatusUpdate = 0;
    if (millis() - lastStatusUpdate > 1000)
    { // Update every second
        updateConnectionStatus();
        lastStatusUpdate = millis();
    }

    // Publish sensor data and update labels every 5 seconds
    static unsigned long lastMsg = 0;
    if (millis() - lastMsg > 5000)
    { // Update every 5 seconds
        if (bme.performReading())
        {
            float temperature = bme.temperature;
            float pressure = bme.pressure / 100.0;
            float humidity = bme.humidity;
            float gas = bme.gas_resistance / 1000.0;
            float altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);

            // Update the UI labels with sensor values
            updateSensorLabels(temperature, pressure, humidity, gas, altitude);

            // Create JSON document for MQTT publish
            StaticJsonDocument<200> doc;
            doc["temperature"] = temperature;
            doc["pressure"] = pressure;
            doc["humidity"] = humidity;
            doc["gas"] = gas;
            doc["altitude"] = altitude;

            // Serialize JSON to string
            char jsonBuffer[200];
            serializeJson(doc, jsonBuffer);

            // Publish to MQTT
            client.publish(mqtt_topic, jsonBuffer);
            lastMsg = millis();
        }
        else
        {
            Serial.println("Failed to perform reading");
        }
    }

    delay(5);
}